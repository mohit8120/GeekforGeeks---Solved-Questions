
class Solution
{
    long countPS(String str)
    {
         int mod = 1000000007;
        int n = str.length();
        
        // dp array to store the count of palindromic subsequences
        long[][] dp = new long[n][n];
        
        // Initialize the dp array with 0
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], 0);
        }
        
        // All individual characters are palindromic subsequences
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        
        // Build the dp array using bottom-up approach
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                
                if (str.charAt(i) == str.charAt(j)) {
                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] + 1) % mod;
                } else {
                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1] + mod) % mod;
                }
            }
        }
        
        // The final answer is stored in the top-right cell of the dp array
        return dp[0][n - 1];
    }
}

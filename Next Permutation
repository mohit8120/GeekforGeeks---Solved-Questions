class Solution{
    static List<Integer> nextPermutation(int N, int arr[]){
         // Find the first element that is smaller than the element to its right
        int i = N - 2;
        while (i >= 0 && arr[i] >= arr[i + 1]) {
            i--;
        }

        // If no such element is found, reverse the array (sorted in ascending order)
        if (i == -1) {
            reverse(arr, 0, N - 1);
            return toList(arr);
        }

        // Find the smallest element to the right of arr[i] that is greater than arr[i]
        int j = N - 1;
        while (arr[j] <= arr[i]) {
            j--;
        }

        // Swap arr[i] and arr[j]
        swap(arr, i, j);

        // Reverse the sub-array to the right of arr[i]
        reverse(arr, i + 1, N - 1);

        return toList(arr);
    }

    static void swap(int arr[], int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    static void reverse(int arr[], int start, int end) {
        while (start < end) {
            swap(arr, start, end);
            start++;
            end--;
        }
    }

    static List<Integer> toList(int arr[]) {
        List<Integer> result = new ArrayList<>();
        for (int num : arr) {
            result.add(num);
        }
        return result;
    }
}

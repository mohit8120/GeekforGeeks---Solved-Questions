

class GfG
{
    boolean is_k_palin(String str, int k)
    {
        int n = str.length();
        
        // Create a table to store subproblem results
        int[][] dp = new int[n][n];
        
        // Fill the table using bottom-up dynamic programming
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i < n - len + 1; i++) {
                int j = i + len - 1;
                
                // If the substring is a palindrome
                if (str.charAt(i) == str.charAt(j)) {
                    if (len == 2) {
                        dp[i][j] = 0;
                    } else {
                        dp[i][j] = dp[i + 1][j - 1];
                    }
                } else {
                    // If characters at both ends are not equal,
                    // consider removing one character from either end
                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        
        // Check if the number of removals is less than or equal to k
        return dp[0][n - 1] <= k;
    }
}


class Solution {
    int lps(String s) {
         int n = s.length();
        int[] lps = new int[n];
        int len = 0; // Length of the previous longest prefix suffix

        lps[0] = 0; // lps[0] is always 0

        int i = 1;

        // Loop through the string
        while (i < n) {
            if (s.charAt(i) == s.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    // Try to match with the previous characters
                    len = lps[len - 1];
                } else {
                    // No matching character found, move to the next character in the string
                    lps[i] = 0;
                    i++;
                }
            }
        }

        // The length of the longest proper prefix which is also a proper suffix
        // is stored in the last element of the lps array
        return lps[n - 1];
    }
}
